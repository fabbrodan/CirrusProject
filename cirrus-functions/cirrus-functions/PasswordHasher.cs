using System;
using System.Collections.Generic;
using System.Text;
using System.Security.Cryptography;

namespace cirrus_functions
{
    public class PasswordHasher
    {
        private static Encoding _encoding;
        private static int _saltSize;
        private static readonly RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider();
        public readonly string RandomSalt = null;

        /// <summary>
        ///Creates a new instance of the PasswordHasher using ASCII encoding and a Salt Size of 32/>
        /// </summary>
        public PasswordHasher()
        {
            _encoding = Encoding.ASCII;
            _saltSize = 32;
            RandomSalt = GenerateRandomSalt(_saltSize);
        }

        /// <summary>
        /// Creates a new instance of the PasswordHasher using the specified Encoding
        /// </summary>
        /// <param name="Encoding">Text Encoding to use for the generated salted password hash</param>
        public PasswordHasher(Encoding Encoding)
        {
            _encoding = Encoding;
            _saltSize = 32;
            RandomSalt = GenerateRandomSalt(_saltSize);
        }
        /// <summary>
        /// Creates a new instance of the PasswordHasher using the specified Salt Size
        /// </summary>
        /// <param name="SaltSize">The number of bytes to be used for the Salt</param>
        public PasswordHasher(int SaltSize)
        {
            _encoding = Encoding.ASCII;
            _saltSize = SaltSize;
            RandomSalt = GenerateRandomSalt(_saltSize);
        }
        /// <summary>
        /// Creates a new instance of the PasswordHasher using the specified Encoding and Salt Size
        /// </summary>
        /// <param name="Encoding">Text Encoding to use for the generated salted password hash</param>
        /// <param name="SaltSize">The number of bytes to be used for the Salt</param>
        public PasswordHasher(Encoding Encoding, int SaltSize)
        {
            _encoding = Encoding;
            _saltSize = SaltSize;
            RandomSalt = GenerateRandomSalt(_saltSize);
        }

        /// <summary>
        /// Private method to generate a random salt string
        /// </summary>
        /// <param name="SaltSize">The number of bytes to be used for the generated string</param>
        /// <returns>A string which is the Text Encoded representation of the randomly generated bytes</returns>
        private string GenerateRandomSalt(int SaltSize)
        {
            byte[] saltBytes = new byte[SaltSize];
            cryptoServiceProvider.GetBytes(saltBytes);
            return _encoding.GetString(saltBytes);
        }

        /// <summary>
        /// Method to generate a salted hash
        /// </summary>
        /// <param name="PasswordText">The text to be used for hashing</param>
        /// <returns>A salted hash using the input PasswordText and this class instance RandomSalt</returns>
        public string GenerateSaltedHash(string PasswordText)
        {
            HashAlgorithm alg = new SHA512Managed();

            byte[] saltBytes = _encoding.GetBytes(RandomSalt);
            byte[] passwordBytes = _encoding.GetBytes(PasswordText);

            byte[] saltedHashBytes = new byte[passwordBytes.Length + saltBytes.Length];

            for (int i = 0; i < RandomSalt.Length; i++)
            {
                saltedHashBytes[i] = saltBytes[i];
            }
            for (int j = 0; j < PasswordText.Length; j++)
            {
                saltedHashBytes[RandomSalt.Length + j] = passwordBytes[j];
            }

            return _encoding.GetString(alg.ComputeHash(saltedHashBytes));
        }

        /// <summary>
        /// Method to check if a generated hash matches input hash
        /// </summary>
        /// <param name="PasswordText">The clear text string to use in hash</param>
        /// <param name="Salt">The salt to use in hash</param>
        /// <param name="HashToCheck">The hash to verify against</param>
        /// <returns>A boolean to indicate if the two hashes match</returns>
        public bool VerifyHash(string PasswordText, string Salt, string HashToCheck)
        {
            bool isMatch = false;

            HashAlgorithm alg = new SHA512Managed();

            byte[] saltBytes = _encoding.GetBytes(Salt);
            byte[] passwordBytes = _encoding.GetBytes(PasswordText);

            byte[] saltedHashBytes = new byte[saltBytes.Length + passwordBytes.Length];

            for (int i = 0; i < Salt.Length; i++)
            {
                saltedHashBytes[i] = saltBytes[i];
            }
            for (int j = 0; j < PasswordText.Length; j++)
            {
                saltedHashBytes[Salt.Length + j] = passwordBytes[j];
            }

            if (_encoding.GetString(alg.ComputeHash(saltedHashBytes)) == HashToCheck)
            {
                isMatch = true;
            }

            return isMatch;
        }
    }
}
