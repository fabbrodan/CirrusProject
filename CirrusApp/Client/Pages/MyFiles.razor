@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@inject FileContainer Files
@implements IDisposable
@page "/files"

<AuthorizeView>
    <Authorized>
        <div class="card-deck">
            @foreach (CategoryModel category in categories)
            {
                <div class="card">
                    <div class="card-header">
                        <h5>@category.CategoryName</h5>
                    </div>
                    <div class="card-body">
                        <ul>
                            @foreach(FileModel file in Files.Files.Where(f => f.Category.CategoryId == category.CategoryId))
                            {
                                <li>@file.FileName</li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>

@code { 

    public class FileModel
    {
        [Required]
        public string FileName { get; set; }
        public CategoryModel Category { get; set; }
    }

    public class CategoryModel
    {
        [Required]
        public int CategoryId { get; set; }
        public string CategoryName { get; set; }
    }

    private FileModel model = new FileModel();
    private List<CategoryModel> categories = new List<CategoryModel>();

    protected override void OnInitialized()
    {
        for (int i = 0; i < 3; i++)
        {
            categories.Add(
                new CategoryModel {
                    CategoryId = i,
                    CategoryName = "Category_" + i
                });
        }

        for(int i = 0; i < 5; i++)
        {
            Random rnd = new Random();
            Files.AddFile(
                new FileModel
                {
                    FileName = i + ".jpg",
                    Category = categories[rnd.Next(0, 3)]
                });
        }

        Files.onChange += StateHasChanged;

        base.OnInitialized();
    }


    private void Upload()
    {
        Files.AddFile(model);
        model = new FileModel();
    }

    public void Dispose()
    {
        Files.onChange -= StateHasChanged;
    }

}
